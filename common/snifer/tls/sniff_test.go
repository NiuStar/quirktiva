package tls

import (
	"testing"
)

func TestSniffHTTP(t *testing.T) {
	type args struct {
		b []byte
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "1",
			args: args{
				b: []byte{
					0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0xd, 0xa,
					0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
					0x6d, 0xd, 0xa, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x47,
					0x6f, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x31, 0x2e,
					0x31, 0xd, 0xa, 0xd, 0xa,
				},
			},
			want: "example.com",
		},
		{
			name: "2",
			args: args{
				b: []byte{
					0x00, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0xd,
					0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
					0x6d, 0xd, 0xa, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x47,
					0x6f, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x31, 0x2e,
					0x31, 0xd, 0xa, 0xd, 0xa,
				},
			},
			want: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := SniffHTTP(tt.args.b); got != tt.want {
				t.Errorf("SniffHTTP() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSniffTLS(t *testing.T) {
	type args struct {
		b []byte
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "1",
			args: args{
				b: []byte{
					0x16, 0x03, 0x01, 0x00, 0xc8, 0x01, 0x00, 0x00,
					0xc4, 0x03, 0x03, 0x1a, 0xac, 0xb2, 0xa8, 0xfe,
					0xb4, 0x96, 0x04, 0x5b, 0xca, 0xf7, 0xc1, 0xf4,
					0x2e, 0x53, 0x24, 0x6e, 0x34, 0x0c, 0x58, 0x36,
					0x71, 0x97, 0x59, 0xe9, 0x41, 0x66, 0xe2, 0x43,
					0xa0, 0x13, 0xb6, 0x00, 0x00, 0x20, 0x1a, 0x1a,
					0xc0, 0x2b, 0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30,
					0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0x14, 0xcc, 0x13,
					0xc0, 0x13, 0xc0, 0x14, 0x00, 0x9c, 0x00, 0x9d,
					0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a, 0x01, 0x00,
					0x00, 0x7b, 0xba, 0xba, 0x00, 0x00, 0xff, 0x01,
					0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00,
					0x14, 0x00, 0x00, 0x11, 0x63, 0x2e, 0x73, 0x2d,
					0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
					0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x17, 0x00,
					0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d, 0x00,
					0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04,
					0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08,
					0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x05, 0x00,
					0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12,
					0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x0c,
					0x02, 0x68, 0x32, 0x08, 0x68, 0x74, 0x74, 0x70,
					0x2f, 0x31, 0x2e, 0x31, 0x00, 0x0b, 0x00, 0x02,
					0x01, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08,
					0xaa, 0xaa, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18,
					0xaa, 0xaa, 0x00, 0x01, 0x00,
				},
			},
			want: "c.s-microsoft.com",
		},
		{
			name: "2",
			args: args{
				b: []byte{
					0x16, 0x03, 0x01, 0x00, 0xee, 0x01, 0x00, 0x00,
					0xea, 0x03, 0x03, 0xe7, 0x91, 0x9e, 0x93, 0xca,
					0x78, 0x1b, 0x3c, 0xe0, 0x65, 0x25, 0x58, 0xb5,
					0x93, 0xe1, 0x0f, 0x85, 0xec, 0x9a, 0x66, 0x8e,
					0x61, 0x82, 0x88, 0xc8, 0xfc, 0xae, 0x1e, 0xca,
					0xd7, 0xa5, 0x63, 0x20, 0xbd, 0x1c, 0x00, 0x00,
					0x8b, 0xee, 0x09, 0xe3, 0x47, 0x6a, 0x0e, 0x74,
					0xb0, 0xbc, 0xa3, 0x02, 0xa7, 0x35, 0xe8, 0x85,
					0x70, 0x7c, 0x7a, 0xf0, 0x00, 0xdf, 0x4a, 0xea,
					0x87, 0x01, 0x14, 0x91, 0x00, 0x20, 0xea, 0xea,
					0xc0, 0x2b, 0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30,
					0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0x14, 0xcc, 0x13,
					0xc0, 0x13, 0xc0, 0x14, 0x00, 0x9c, 0x00, 0x9d,
					0x00, 0x2f, 0x00, 0x35, 0x00, 0x0a, 0x01, 0x00,
					0x00, 0x81, 0x9a, 0x9a, 0x00, 0x00, 0xff, 0x01,
					0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
					0x16, 0x00, 0x00, 0x13, 0x77, 0x77, 0x77, 0x30,
					0x37, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74,
					0x61, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x00,
					0x17, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
					0x0d, 0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08,
					0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05,
					0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00,
					0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x12, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0e,
					0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74,
					0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x75, 0x50,
					0x00, 0x00, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00,
					0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x9a, 0x9a,
					0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x8a, 0x8a,
					0x00, 0x01, 0x00,
				},
			},
			want: "www07.clicktale.net",
		},
		{
			name: "3",
			args: args{
				b: []byte{
					0x16, 0x03, 0x01, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xe2, 0x03, 0x03, 0x81, 0x47, 0xc1,
					0x66, 0xd5, 0x1b, 0xfa, 0x4b, 0xb5, 0xe0, 0x2a, 0xe1, 0xa7, 0x87, 0x13, 0x1d, 0x11, 0xaa, 0xc6,
					0xce, 0xfc, 0x7f, 0xab, 0x94, 0xc8, 0x62, 0xad, 0xc8, 0xab, 0x0c, 0xdd, 0xcb, 0x20, 0x6f, 0x9d,
					0x07, 0xf1, 0x95, 0x3e, 0x99, 0xd8, 0xf3, 0x6d, 0x97, 0xee, 0x19, 0x0b, 0x06, 0x1b, 0xf4, 0x84,
					0x0b, 0xb6, 0x8f, 0xcc, 0xde, 0xe2, 0xd0, 0x2d, 0x6b, 0x0c, 0x1f, 0x52, 0x53, 0x13, 0x00, 0x08,
					0x13, 0x02, 0x13, 0x03, 0x13, 0x01, 0x00, 0xff, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0c,
					0x00, 0x0a, 0x00, 0x00, 0x07, 0x64, 0x6f, 0x67, 0x66, 0x69, 0x73, 0x68, 0x00, 0x0b, 0x00, 0x04,
					0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e,
					0x00, 0x19, 0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
					0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08, 0x07, 0x08, 0x08,
					0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01,
					0x06, 0x01, 0x00, 0x2b, 0x00, 0x07, 0x06, 0x7f, 0x1c, 0x7f, 0x1b, 0x7f, 0x1a, 0x00, 0x2d, 0x00,
					0x02, 0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x2f, 0x35, 0x0c,
					0xb6, 0x90, 0x0a, 0xb7, 0xd5, 0xc4, 0x1b, 0x2f, 0x60, 0xaa, 0x56, 0x7b, 0x3f, 0x71, 0xc8, 0x01,
					0x7e, 0x86, 0xd3, 0xb7, 0x0c, 0x29, 0x1a, 0x9e, 0x5b, 0x38, 0x3f, 0x01, 0x72,
				},
			},
			want: "dogfish",
		},
		{
			name: "4",
			args: args{
				b: []byte{
					0x16, 0x03, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00,
					0xff, 0x03, 0x03, 0x3d, 0x89, 0x52, 0x9e, 0xee,
					0xbe, 0x17, 0x63, 0x75, 0xef, 0x29, 0xbd, 0x14,
					0x6a, 0x49, 0xe0, 0x2c, 0x37, 0x57, 0x71, 0x62,
					0x82, 0x44, 0x94, 0x8f, 0x6e, 0x94, 0x08, 0x45,
					0x7f, 0xdb, 0xc1, 0x00, 0x00, 0x3e, 0xc0, 0x2c,
					0xc0, 0x30, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8,
					0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e,
					0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23,
					0xc0, 0x27, 0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14,
					0x00, 0x39, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33,
					0x00, 0x9d, 0x00, 0x9c, 0x13, 0x02, 0x13, 0x03,
					0x13, 0x01, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35,
					0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x00, 0x98,
					0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00,
					0x0b, 0x31, 0x30, 0x2e, 0x34, 0x32, 0x2e, 0x30,
					0x2e, 0x32, 0x34, 0x33, 0x00, 0x0b, 0x00, 0x04,
					0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0a,
					0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x19,
					0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d,
					0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03,
					0x06, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
					0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x03,
					0x02, 0x01, 0x02, 0x02, 0x04, 0x02, 0x05, 0x02,
					0x06, 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17,
					0x00, 0x00, 0x00, 0x2b, 0x00, 0x09, 0x08, 0x7f,
					0x14, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00,
					0x2d, 0x00, 0x03, 0x02, 0x01, 0x00, 0x00, 0x28,
					0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
					0x13, 0x7c, 0x6e, 0x97, 0xc4, 0xfd, 0x09, 0x2e,
					0x70, 0x2f, 0x73, 0x5a, 0x9b, 0x57, 0x4d, 0x5f,
					0x2b, 0x73, 0x2c, 0xa5, 0x4a, 0x98, 0x40, 0x3d,
					0x75, 0x6e, 0xb4, 0x76, 0xf9, 0x48, 0x8f, 0x36,
				},
			},
			want: "10.42.0.243",
		},
		{
			name: "5",
			args: args{
				b: []byte{
					0x16, 0x03, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00,
					0xff, 0x03, 0x03, 0x3d, 0x89, 0x52, 0x9e, 0xee,
					0xbe, 0x17, 0x03, 0x75, 0xef, 0x29, 0xbd, 0x14,
					0x6a, 0x49, 0xe0, 0x2c, 0x37, 0x57, 0x71, 0x62,
					0x82, 0xef, 0x94, 0x8f, 0x6e, 0x94, 0x08, 0x45,
					0x7f, 0xdb, 0xc1, 0x00, 0x00, 0x3e, 0xc0, 0x2c,
					0xc0, 0x12, 0x09, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8,
					0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e,
					0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23,
					0xc0, 0x27, 0x88, 0x67, 0xc0, 0x0a, 0xc0, 0x14,
					0x00, 0x39, 0xc0, 0xf9, 0xc0, 0x13, 0x00, 0x33,
					0x00, 0x9d, 0x00, 0x9c, 0x13, 0x02, 0x13, 0x03,
					0x13, 0x01, 0xcd, 0x3d, 0xef, 0x3c, 0x00, 0x35,
					0x00, 0x2f, 0x00, 0xff, 0x01, 0xab, 0x00, 0x98,
					0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00,
					0x0b, 0x31, 0x30, 0x2e, 0x34, 0x32, 0x2e, 0x30,
					0x2e, 0x32, 0x34, 0x33, 0x00, 0x0b, 0x00, 0x04,
					0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x0a,
					0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x19,
					0x00, 0x18, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0d,
					0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03,
					0x06, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06,
					0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x03,
					0x02, 0x01, 0x02, 0x02, 0x04, 0x02, 0x05, 0x02,
					0x06, 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17,
					0x00, 0x00, 0xac, 0x2b, 0xff, 0x09, 0x08, 0x7f,
					0x14, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00,
					0x2d, 0x00, 0x03, 0x02, 0x01, 0x00, 0x00, 0x28,
					0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
					0x13, 0x7c, 0x6e, 0x97, 0xc4, 0xfd, 0x09, 0x2e,
					0x70, 0x2f, 0x73, 0x5a, 0x9b, 0x57, 0x4d, 0x5f,
					0x2b, 0x73, 0x2c, 0xa5, 0x4a, 0x98, 0x40, 0x3d,
					0x75, 0x6e, 0xb4, 0x76, 0xf9, 0x48, 0x8f, 0x36,
				},
			},
			want: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := SniffTLS(tt.args.b); got != tt.want {
				t.Errorf("SniffTLS() = [%v], want [%v]", got, tt.want)
			}
		})
	}
}

func TestSniffQUIC(t *testing.T) {
	type args struct {
		b []byte
	}
	tests := []struct {
		name string
		args args
		want string
		try  bool
	}{
		{
			name: "1",
			args: args{
				b: []byte{
					0xc8, 0x0, 0x0, 0x0, 0x1, 0x14, 0x9f, 0x3f, 0xc0, 0xc, 0x5b, 0x57, 0x6c, 0xb, 0xf, 0x4a, 0xa2,
					0x67, 0x8d, 0xbd, 0x3d, 0xc6, 0x9f, 0xe, 0x2d, 0xc0, 0x4, 0x2b, 0xf, 0x5c, 0x80, 0x0,
					0x44, 0xc2, 0xbd,
					0xef, 0xfc, 0x8, 0x47, 0x89, 0x81, 0x2a, 0xd, 0x21, 0x26, 0x25, 0x93, 0xdd, 0x74, 0x77, 0x7f, 0x20,
					0x7e, 0xc2, 0xc1, 0x5e, 0x5a, 0xb7, 0xd3, 0x34, 0x7, 0x96, 0x88, 0x66, 0xa4, 0x2c, 0x42, 0x87, 0xfd,
					0xb6, 0x88, 0x4d, 0xba, 0x34, 0x96, 0xcb, 0x8f, 0xc5, 0x32, 0x1c, 0x17, 0x56, 0xdf, 0xe8, 0xf, 0x4d,
					0x36, 0xb8, 0xfb, 0x26, 0xd8, 0x8f, 0x53, 0xa0, 0x4, 0x2b, 0x75, 0x7a, 0xb1, 0xdb, 0x8c, 0xd1, 0xf2,
					0xdf, 0xee, 0x43, 0x29, 0xdd, 0xf, 0x23, 0x9d, 0xf8, 0x21, 0x4e, 0x4c, 0x90, 0xe7, 0x2e, 0x27, 0xed,
					0xcf, 0x97, 0xa, 0x88, 0x6f, 0x9b, 0x80, 0x91, 0x6a, 0x25, 0xa3, 0x84, 0x85, 0xd0, 0xb0, 0xbd, 0x6a,
					0xd7, 0x8c, 0x7c, 0x56, 0x97, 0xe0, 0x1b, 0x1e, 0x57, 0x9f, 0x1f, 0xa, 0xfc, 0xe9, 0xba, 0x38, 0x66,
					0x6b, 0x4a, 0x15, 0xfd, 0x4c, 0xd8, 0x8, 0x68, 0xb6, 0xd7, 0x2d, 0x8e, 0xea, 0xd5, 0xb1, 0xd4, 0x55,
					0x71, 0x3, 0xf7, 0xcd, 0x2f, 0xa2, 0xbd, 0x52, 0x54, 0x50, 0x3c, 0xef, 0x6b, 0xe0, 0x5b, 0xdd, 0x80,
					0x9f, 0x90, 0x27, 0x1f, 0xb5, 0x57, 0x88, 0x7e, 0x9, 0x29, 0x2a, 0x6e, 0x49, 0xdb, 0x95, 0x89, 0xe6,
					0xda, 0x87, 0xa4, 0xe0, 0x4f, 0xa5, 0x46, 0xa9, 0xcf, 0xf, 0x55, 0x82, 0x39, 0x4, 0xbc, 0x46, 0x34,
					0xac, 0xb6, 0x2a, 0x93, 0x87, 0x5d, 0x7c, 0x65, 0x7d, 0x1d, 0x4f, 0xad, 0x42, 0x9c, 0x1d, 0xa7, 0x8c,
					0x1f, 0x18, 0xdd, 0x4a, 0xf9, 0xb7, 0x56, 0xc, 0x29, 0x7d, 0x49, 0x2e, 0x60, 0x6, 0x32, 0x88, 0xc1,
					0x1a, 0xf0, 0xce, 0x3d, 0x0, 0xd2, 0xb5, 0x51, 0x88, 0x19, 0x9c, 0x9a, 0x4d, 0xaa, 0x4b, 0xc9, 0x2a,
					0xab, 0x7d, 0xf7, 0x97, 0x94, 0x61, 0x60, 0x2b, 0x95, 0xda, 0x79, 0x57, 0x9c, 0xb7, 0xd2, 0xda, 0x96,
					0xfd, 0x58, 0x3e, 0x6e, 0xf, 0xf5, 0x8e, 0xc5, 0x59, 0xed, 0xc4, 0x3, 0x80, 0x77, 0xd5, 0x4f, 0x9,
					0x59, 0x2d, 0x5, 0xa5, 0xf3, 0x5f, 0xa5, 0x4a, 0x39, 0x6c, 0xe2, 0x4a, 0x15, 0x39, 0x77, 0xf9, 0x3d,
					0x8, 0x40, 0x87, 0x3e, 0x6d, 0x6d, 0xba, 0x6a, 0x9f, 0x5f, 0x92, 0x7c, 0xb4, 0x52, 0xab, 0xc4, 0x66,
					0x7c, 0x39, 0xb2, 0x6a, 0xe7, 0x9f, 0xb2, 0xba, 0x68, 0xe8, 0x7e, 0x3b, 0x47, 0xd4, 0x27, 0x76, 0xc1,
					0x9c, 0xba, 0x6e, 0x4e, 0x4e, 0x5a, 0xc5, 0xe1, 0xf3, 0xb5, 0xf3, 0x64, 0xd6, 0x33, 0xff, 0x9a, 0x86,
					0x47, 0xdc, 0x3f, 0xb4, 0xf9, 0x6d, 0x4a, 0x4a, 0xf4, 0x96, 0xcd, 0x11, 0xec, 0xb0, 0xb1, 0xe9, 0xb0,
					0x3f, 0x84, 0xe2, 0x15, 0x3, 0x74, 0xdf, 0xf4, 0x8f, 0x13, 0xb1, 0xc2, 0x40, 0x9e, 0xa8, 0x8b, 0xd5,
					0xa9, 0x7b, 0x0, 0x64, 0xea, 0xf4, 0x23, 0xdc, 0x1e, 0xea, 0x61, 0xf7, 0xd5, 0x24, 0x21, 0x57, 0x1,
					0xdf, 0x39, 0x4c, 0x39, 0x55, 0x5a, 0x51, 0xa2, 0x19, 0xf4, 0x5f, 0x59, 0xa7, 0x27, 0xc, 0xb9, 0x1e,
					0x1e, 0x26, 0xc5, 0x20, 0x4, 0xa3, 0xd0, 0x3c, 0xe6, 0xb8, 0xdb, 0xd8, 0x6f, 0x24, 0x20, 0xe6, 0xdf,
					0x89, 0xee, 0xec, 0x20, 0xcd, 0xa6, 0xe5, 0x5d, 0x5, 0xe7, 0x68, 0xa, 0x41, 0xb0, 0xe1, 0x44, 0xe3,
					0x4e, 0xa9, 0xcf, 0x86, 0xe9, 0x95, 0x35, 0xb, 0xc3, 0xc6, 0xf2, 0x44, 0x6a, 0x3, 0xa3, 0x13, 0x27,
					0xc7, 0xf0, 0xa5, 0x16, 0x43, 0x39, 0x21, 0xe2, 0x40, 0xa2, 0xc1, 0x2f, 0xa5, 0xe5, 0x74, 0x59, 0xf1,
					0x44, 0xee, 0x96, 0x2b, 0xf8, 0x6f, 0xa, 0x55, 0x60, 0x6f, 0x4a, 0x80, 0xf9, 0xaa, 0xd3, 0xa5, 0x44,
					0x6, 0xa6, 0x6b, 0x35, 0xf, 0x24, 0x6c, 0x97, 0xc4, 0xbe, 0xdd, 0x70, 0x1c, 0x4c, 0x4f, 0x24, 0x3c,
					0x60, 0x42, 0x0, 0xc3, 0xe8, 0x80, 0x7a, 0xf5, 0xff, 0xcc, 0x9d, 0x7d, 0xa0, 0xd, 0xeb, 0xb5, 0xbb,
					0x73, 0xd4, 0x11, 0x95, 0xa1, 0xda, 0x66, 0xbc, 0x34, 0x8e, 0x38, 0x2c, 0xea, 0x48, 0x58, 0x40, 0xa3,
					0xf9, 0x64, 0x7d, 0x49, 0x50, 0x29, 0xae, 0xc4, 0xc0, 0xac, 0xa7, 0xac, 0x49, 0xcc, 0xe6, 0xe0, 0x67,
					0x49, 0x55, 0x4a, 0x4f, 0xbe, 0xde, 0x9, 0x19, 0x53, 0x2a, 0xcd, 0xaf, 0x4, 0xa8, 0x33, 0x80, 0xbc,
					0xcd, 0xb7, 0x48, 0xef, 0xe8, 0x11, 0x23, 0xa7, 0xf8, 0xf0, 0x72, 0xc9, 0x5, 0xc0, 0xe8, 0xc4, 0xb1,
					0x59, 0x7c, 0xec, 0xae, 0x6a, 0x48, 0xc0, 0xd5, 0x16, 0x7c, 0x8e, 0xad, 0x7d, 0x36, 0x55, 0xd0, 0x70,
					0xab, 0x58, 0x86, 0xb4, 0xda, 0xcd, 0x8b, 0xc2, 0xd, 0x83, 0x26, 0x46, 0xa0, 0x93, 0x7f,
					0xcb, 0xd4, 0x6d,
					0x5, 0x14, 0x78, 0xa6, 0x6f, 0x86, 0x31, 0x80, 0xfd, 0xe5, 0x9e, 0x86, 0x1e, 0xd8, 0x95,
					0x69, 0x8d, 0xe,
					0xa5, 0xb, 0x18, 0x1b, 0x13, 0xf7, 0xf0, 0x56, 0xf9, 0x70, 0x2b, 0x21, 0x95, 0x40, 0xc7,
					0x5, 0x51, 0x67,
					0xa5, 0xf7, 0x69, 0x93, 0x23, 0x2f, 0x6d, 0x2d, 0x95, 0x51, 0x86, 0xbc, 0x90, 0x86, 0x89, 0x63, 0xac,
					0x79, 0xd8, 0x25, 0x97, 0xac, 0xe6, 0x8b, 0xf1, 0xaa, 0x27, 0xec, 0x39, 0x6e, 0x58, 0x8e, 0x95, 0xc,
					0x3a, 0x28, 0x36, 0xf1, 0x2c, 0x25, 0x24, 0x87, 0xa0, 0x73, 0x86, 0xe2, 0x65, 0xe9, 0x22, 0xf0, 0x2c,
					0x8d, 0xa, 0x2a, 0xeb, 0x8d, 0xac, 0x94, 0x78, 0x58, 0x6c, 0xb6, 0xd2, 0xe2, 0x73, 0x85,
					0xa3, 0x86, 0x4d,
					0x1f, 0x3f, 0xa8, 0x89, 0xe4, 0x2a, 0x6c, 0x54, 0x11, 0xcc, 0xb3, 0xc, 0x2c, 0x83, 0xa5,
					0x5c, 0xa6, 0xfa,
					0x83, 0xc6, 0x56, 0x8c, 0x40, 0xc4, 0x69, 0xf5, 0x24, 0xf9, 0xa8, 0xf0, 0x5d, 0xe6, 0x11,
					0x2a, 0x22, 0x1,
					0xba, 0x74, 0xaa, 0x77, 0xf9, 0x44, 0x28, 0x85, 0xb5, 0xd5, 0x7e, 0x2d, 0x26, 0xf, 0x5f,
					0xaa, 0xec, 0x9b,
					0x13, 0xcf, 0xaa, 0x58, 0x3f, 0x8e, 0xae, 0x50, 0x98, 0xd9, 0x9a, 0x22, 0x35, 0xc8, 0x50, 0x99, 0x3b,
					0x8b, 0x42, 0x71, 0x45, 0xd3, 0x61, 0x91, 0x69, 0xa9, 0x12, 0xb0, 0xfb, 0x85, 0xdb, 0xa5, 0x3a, 0xe4,
					0xee, 0x8a, 0x1b, 0x96, 0xf6, 0xfe, 0x44, 0x2d, 0x59, 0xc0, 0x37, 0xfe, 0x47, 0x3d, 0x90, 0xde, 0x95,
					0xe3, 0xd, 0xe3, 0x3c, 0x36, 0xea, 0x22, 0x8a, 0x12, 0xd6, 0xae, 0x89, 0xf4, 0x46, 0xaf,
					0xf9, 0x6a, 0x75,
					0x9b, 0x76, 0xdc, 0x7f, 0x43, 0x91, 0x21, 0x8f, 0x27, 0xaf, 0xa4, 0xe1, 0x56, 0xcb, 0x7b, 0x42, 0x96,
					0x2e, 0x21, 0x2b, 0x95, 0xc1, 0x7a, 0x78, 0x6d, 0x78, 0xc, 0x89, 0xd1, 0xca, 0xb9, 0x47,
					0x9c, 0x4, 0xd,
					0xe5, 0x61, 0x44, 0xa8, 0xae, 0x98, 0xd0, 0x54, 0x4d, 0x3b, 0x68, 0xbc, 0xec, 0x7, 0x4f,
					0xca, 0x47, 0xf6,
					0xc, 0xd5, 0xf4, 0x55, 0x79, 0x18, 0x9e, 0x48, 0x2b, 0x4f, 0xbb, 0x57, 0xfb, 0x23, 0x5c,
					0x51, 0x3c, 0xff,
					0x4a, 0x4f, 0xa8, 0x8a, 0x90, 0x52, 0x7a, 0x9, 0xca, 0xd, 0xe3, 0x9d, 0xc4, 0x8c, 0x10,
					0xa5, 0x9d, 0x28,
					0xae, 0x2d, 0xce, 0xd4, 0xe4, 0x89, 0xb1, 0x2b, 0xcc, 0x14, 0x8c, 0x46, 0x41, 0x6b, 0xd,
					0x47, 0xd3, 0xff,
					0x6e, 0x62, 0xe5, 0x1a, 0x43, 0x26, 0xb0, 0xac, 0xc2, 0x20, 0x8b, 0x90, 0xd0, 0x36, 0x72, 0x51, 0x7b,
					0x5c, 0x85, 0x85, 0xf2, 0x6a, 0x18, 0xb1, 0x27, 0xa6, 0x5d, 0x9c, 0xe9, 0x6a, 0x12, 0x4e, 0x17, 0x3d,
					0xe5, 0xe9, 0xe3, 0xa1, 0x5, 0x7c, 0x9a, 0x9, 0x6, 0x4c, 0x51, 0x1f, 0xd9, 0xc5, 0x6f,
					0xf9, 0x63, 0x3,
					0x82, 0x41, 0x81, 0xbe, 0xbd, 0xb4, 0x19, 0x9, 0x62, 0xbc, 0x4c, 0xd9, 0x71, 0xec, 0x63, 0xc3, 0x72,
					0xd3, 0x8, 0x68, 0x7f, 0xa3, 0x58, 0x9a, 0xd7, 0xe6, 0x8c, 0x41, 0xd5, 0x67, 0xaf, 0x1,
					0x6b, 0x4f, 0xde,
					0x51, 0x49, 0x3e, 0x97, 0xc1, 0xcb, 0xa4, 0xe2, 0x9a, 0x7c, 0x9a, 0x65, 0x5a, 0x5d, 0xdf, 0xb9, 0xf7,
					0x3e, 0x44, 0x32, 0xc, 0xa1, 0xcd, 0x9c, 0x63, 0x9, 0xf5, 0x4b, 0x54, 0xb1, 0xb9, 0xe,
					0x4c, 0xc2, 0xec,
					0xf6, 0x47, 0xa2, 0x6f, 0x8d, 0xab, 0x22, 0xd9, 0x2a, 0xaf, 0xd2, 0x76, 0xc3, 0x87, 0xb1, 0xf5, 0x3b,
					0x46, 0x45, 0xf, 0xd2, 0x3b, 0x2a, 0xd1, 0xc9, 0x48, 0x69, 0xcd, 0xac, 0x5, 0xb1, 0x1f,
					0x57, 0x51, 0xd0,
					0xc3, 0xc5, 0x8e, 0x55, 0x3a, 0x71, 0xa6, 0x6, 0xba, 0x8c, 0xcb, 0x33, 0xf9, 0xdc, 0x2d,
					0x85, 0xda, 0x0,
					0x3f, 0xf8, 0x11, 0x41, 0xaa, 0x13, 0x61, 0xe3, 0x27, 0xef, 0x19, 0xdb, 0xbc, 0x93, 0x2f, 0x88, 0xd0,
					0x41, 0x8, 0x49, 0xbf, 0xfe, 0x6e, 0x4d, 0xda, 0x52, 0x90, 0xdd, 0x2b, 0x8, 0xdd, 0x15,
					0x73, 0x4, 0x8c,
					0xc1, 0x60, 0x4e, 0x12, 0x6, 0xaf, 0xce, 0x5b, 0x7b, 0x37, 0x15, 0xb7, 0x83, 0x5b, 0x6c,
					0x4c, 0xee, 0x7,
					0x25, 0xcd, 0x64, 0x22, 0x6, 0x37, 0x45, 0xa3, 0x21, 0x2e, 0xa3, 0x4b, 0xe3, 0xd3, 0x10,
					0xf8, 0xab, 0xe3, 0x1d, 0xce, 0xf, 0x25, 0x60, 0x98,
				},
			},
			want: "example.com",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
		retry:
			if got := SniffQUIC(tt.args.b); got != tt.want {
				if !tt.try {
					tt.try = true
					goto retry
				}
				t.Errorf("SniffQUIC() = [%v], want [%v]", got, tt.want)
			}
		})
	}
}

func TestVerifyHostnameInSNI(t *testing.T) {
	type args struct {
		b string
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "1",
			args: args{b: "invalid"},
			want: false,
		},
		{
			name: "2",
			args: args{b: "127.0.0.1"},
			want: false,
		},
		{
			name: "3",
			args: args{b: "example.co.m"},
			want: false,
		},
		{
			name: "4",
			args: args{b: "example..com"},
			want: false,
		},
		{
			name: "5",
			args: args{b: ".example.com"},
			want: false,
		},
		{
			name: "6",
			args: args{b: "example.com."},
			want: false,
		},
		{
			name: "7",
			args: args{b: "*.example.com"},
			want: false,
		},
		{
			name: "8",
			args: args{b: "i.i"},
			want: false,
		},
		{
			name: "9",
			args: args{b: "example.com"},
			want: true,
		},
		{
			name: "10",
			args: args{b: "exam-ple.com"},
			want: true,
		},
		{
			name: "11",
			args: args{b: "xn--example.com"},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := VerifyHostnameInSNI(tt.args.b); got != tt.want {
				t.Errorf("VerifyHostnameInSNI() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestToLowerASCII(t *testing.T) {
	type args struct {
		s string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "1",
			args: args{
				s: "UPPER001@",
			},
			want: "upper001@",
		}, {
			name: "2",
			args: args{
				s: "lower200#",
			},
			want: "lower200#",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := ToLowerASCII(tt.args.s); got != tt.want {
				t.Errorf("ToLowerASCII() = %v, want %v", got, tt.want)
			}
		})
	}
}
